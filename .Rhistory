df$Cohort.Term[is.na(df$Cohort.Term) | is.infinite(df$Cohort.Term) | is.infinite(-df$Cohort.Term)] <- 0
df$Cohort.Term <- as.integer(df$Cohort.Term)
df$Flag[is.na(df$Flag) | is.infinite(df$Flag) | is.infinite(-df$Flag)] <- 0
df$Flag <- as.integer(df$Flag)
df$is_BA_Major <- ifelse(
df$Major.1 == "BA Major" |
df$Major.2 == "BA Major" |
df$Major.3 == "BA Major",
1,
0
)
df$is_BA_Thematic <- ifelse(df$Thematic.Sequence.Title == "ISA2 Applied Business Statistics", 1, 0)
df$is_BA_minor <- ifelse(df$Minor == "Business Analytics", 1, 0)
# Filter rows where Grade is 'A' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'A', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), A_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$A_Grade_Count[is.na(df$A_Grade_Count)] <- 0
# Filter rows where Grade is 'B' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'B', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), B_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$B_Grade_Count[is.na(df$B_Grade_Count)] <- 0
# Filter rows where Grade is 'C' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'C', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), C_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$C_Grade_Count[is.na(df$C_Grade_Count)] <- 0
# Filter rows where Grade is 'D' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'D', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), D_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$D_Grade_Count[is.na(df$D_Grade_Count)] <- 0
# Drop columns that are not needed
columns_to_drop <- c('Major.1', 'Major.2', 'Major.3', 'Minor', 'Thematic.Sequence.Title')
df <- df[, !(names(df) %in% columns_to_drop)]
# Group by 'Student.ID' and keep only the first row for each group
Student_set <- df %>% group_by(Student.ID) %>% slice(1)
df <- na.omit(df)
# Drop columns from X
X <- df[, !(names(df) %in% c('Student.ID', 'Flag', 'Term.Code'))]
# Extract the target variable
y <- df$Flag
# Set the random seed for reproducibility
set.seed(591)
# Split the data into training and testing sets
splitIndex <- createDataPartition(y, p = 0.7, list = FALSE)
knitr::opts_chunk$set(echo = TRUE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(#DataExplorer, # For explorer and cleaning data by visualizing missing values.
gptstudio,#For coding assistance
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
sjPlot,
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl,
dplyr
) # For creating dummy variables of categorical variables automatically.)
sessionInfo()
df <- read_csv("StudentData_withGrades")
df <- df %>% select(-Enrolled.Student.Count)
df$Cohort.Term[is.na(df$Cohort.Term) | is.infinite(df$Cohort.Term) | is.infinite(-df$Cohort.Term)] <- 0
df$Cohort.Term <- as.integer(df$Cohort.Term)
df$Flag[is.na(df$Flag) | is.infinite(df$Flag) | is.infinite(-df$Flag)] <- 0
df$Flag <- as.integer(df$Flag)
df$is_BA_Major <- ifelse(
df$Major.1 == "BA Major" |
df$Major.2 == "BA Major" |
df$Major.3 == "BA Major",
1,
0
)
df$is_BA_Thematic <- ifelse(df$Thematic.Sequence.Title == "ISA2 Applied Business Statistics", 1, 0)
df$is_BA_minor <- ifelse(df$Minor == "Business Analytics", 1, 0)
# Filter rows where Grade is 'A' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'A', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), A_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$A_Grade_Count[is.na(df$A_Grade_Count)] <- 0
# Filter rows where Grade is 'B' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'B', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), B_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$B_Grade_Count[is.na(df$B_Grade_Count)] <- 0
# Filter rows where Grade is 'C' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'C', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), C_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$C_Grade_Count[is.na(df$C_Grade_Count)] <- 0
# Filter rows where Grade is 'D' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'D', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), D_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$D_Grade_Count[is.na(df$D_Grade_Count)] <- 0
# Drop columns that are not needed
columns_to_drop <- c('Major.1', 'Major.2', 'Major.3', 'Minor', 'Thematic.Sequence.Title')
df <- df[, !(names(df) %in% columns_to_drop)]
# Group by 'Student.ID' and keep only the first row for each group
Student_set <- df %>% group_by(Student.ID) %>% slice(1)
df <- na.omit(df)
# Drop columns from X
X <- df[, !(names(df) %in% c('Student.ID', 'Flag', 'Term.Code'))]
# Extract the target variable
y <- df$Flag
# Set the random seed for reproducibility
set.seed(591)
# Split the data into training and testing sets
sample <- sample.split(y, SplitRatio = 0.7)
knitr::opts_chunk$set(echo = TRUE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(#DataExplorer, # For explorer and cleaning data by visualizing missing values.
gptstudio,#For coding assistance
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
sjPlot,
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl,
dplyr
) # For creating dummy variables of categorical variables automatically.)
sessionInfo()
df <- read_csv("StudentData_withGrades")
df <- df %>% select(-Enrolled.Student.Count)
df$Cohort.Term[is.na(df$Cohort.Term) | is.infinite(df$Cohort.Term) | is.infinite(-df$Cohort.Term)] <- 0
df$Cohort.Term <- as.integer(df$Cohort.Term)
df$Flag[is.na(df$Flag) | is.infinite(df$Flag) | is.infinite(-df$Flag)] <- 0
df$Flag <- as.integer(df$Flag)
df$is_BA_Major <- ifelse(
df$Major.1 == "BA Major" |
df$Major.2 == "BA Major" |
df$Major.3 == "BA Major",
1,
0
)
df$is_BA_Thematic <- ifelse(df$Thematic.Sequence.Title == "ISA2 Applied Business Statistics", 1, 0)
df$is_BA_minor <- ifelse(df$Minor == "Business Analytics", 1, 0)
# Filter rows where Grade is 'A' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'A', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), A_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$A_Grade_Count[is.na(df$A_Grade_Count)] <- 0
# Filter rows where Grade is 'B' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'B', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), B_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$B_Grade_Count[is.na(df$B_Grade_Count)] <- 0
# Filter rows where Grade is 'C' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'C', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), C_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$C_Grade_Count[is.na(df$C_Grade_Count)] <- 0
# Filter rows where Grade is 'D' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'D', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), D_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$D_Grade_Count[is.na(df$D_Grade_Count)] <- 0
# Drop columns that are not needed
columns_to_drop <- c('Major.1', 'Major.2', 'Major.3', 'Minor', 'Thematic.Sequence.Title')
df <- df[, !(names(df) %in% columns_to_drop)]
# Group by 'Student.ID' and keep only the first row for each group
Student_set <- df %>% group_by(Student.ID) %>% slice(1)
df <- na.omit(df)
library(caTools)
knitr::opts_chunk$set(echo = TRUE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(#DataExplorer, # For explorer and cleaning data by visualizing missing values.
gptstudio,#For coding assistance
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
sjPlot,
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl,
dplyr
) # For creating dummy variables of categorical variables automatically.)
sessionInfo()
df <- read_csv("StudentData_withGrades")
df <- df %>% select(-Enrolled.Student.Count)
df$Cohort.Term[is.na(df$Cohort.Term) | is.infinite(df$Cohort.Term) | is.infinite(-df$Cohort.Term)] <- 0
df$Cohort.Term <- as.integer(df$Cohort.Term)
df$Flag[is.na(df$Flag) | is.infinite(df$Flag) | is.infinite(-df$Flag)] <- 0
df$Flag <- as.integer(df$Flag)
df$is_BA_Major <- ifelse(
df$Major.1 == "BA Major" |
df$Major.2 == "BA Major" |
df$Major.3 == "BA Major",
1,
0
)
df$is_BA_Thematic <- ifelse(df$Thematic.Sequence.Title == "ISA2 Applied Business Statistics", 1, 0)
df$is_BA_minor <- ifelse(df$Minor == "Business Analytics", 1, 0)
# Filter rows where Grade is 'A' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'A', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), A_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$A_Grade_Count[is.na(df$A_Grade_Count)] <- 0
# Filter rows where Grade is 'B' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'B', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), B_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$B_Grade_Count[is.na(df$B_Grade_Count)] <- 0
# Filter rows where Grade is 'C' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'C', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), C_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$C_Grade_Count[is.na(df$C_Grade_Count)] <- 0
# Filter rows where Grade is 'D' and group by Student.ID to count occurrences
df_grade_count <- table(df[df$`Final Letter Grade Group` == 'D', 'Student.ID'])
# Create a new data frame with the count information
df_grade_count <- data.frame(Student.ID = names(df_grade_count), D_Grade_Count = as.numeric(df_grade_count))
# Merge the count back to the original DataFrame
df <- merge(df, df_grade_count, by = 'Student.ID', all.x = TRUE)
# Fill NA values in the new column with 0
df$D_Grade_Count[is.na(df$D_Grade_Count)] <- 0
# Drop columns that are not needed
columns_to_drop <- c('Major.1', 'Major.2', 'Major.3', 'Minor', 'Thematic.Sequence.Title')
df <- df[, !(names(df) %in% columns_to_drop)]
# Group by 'Student.ID' and keep only the first row for each group
Student_set <- df %>% group_by(Student.ID) %>% slice(1)
df <- na.omit(df)
install.packages("caTools")
library(caTools)
# Drop columns from X
X <- df[, !(names(df) %in% c('Student.ID', 'Flag', 'Term.Code'))]
# Extract the target variable
y <- df$Flag
# Set the random seed for reproducibility
set.seed(591)
# Split the data into training and testing sets
sample <- sample.split(y, SplitRatio = 0.7)
knitr::opts_chunk$set(echo = TRUE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(#DataExplorer, # For explorer and cleaning data by visualizing missing values.
gptstudio,#For coding assistance
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
sjPlot,
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl,
dplyr
) # For creating dummy variables of categorical variables automatically.)
p = ggplot(thematic, aes(x = `Term Code`, y = `Enrolled Student Count`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("ISA2 Thematic Sequence Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
p
knitr::opts_chunk$set(echo = TRUE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(#DataExplorer, # For explorer and cleaning data by visualizing missing values.
gptstudio,#For coding assistance
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
sjPlot,
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl,
dplyr
) # For creating dummy variables of categorical variables automatically.)
sessionInfo()
p = ggplot(thematic, aes(x = `Term Code`, y = `Enrolled Student Count`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("ISA2 Thematic Sequence Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
p
p = ggplot(thematic, aes(x = `Term.Code`, y = `Enrolled.Student.Count`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("ISA2 Thematic Sequence Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
p
View(thematic)
p = ggplot(thematic, aes(x = `Term.Code`, y = count(Student.ID))) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("ISA2 Thematic Sequence Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
p
p = ggplot(thematic, aes(x = `Term.Code`, y = count(Student.ID)))) +
p = ggplot(thematic, aes(x = `Term.Code`, y = count(Student.ID))) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("ISA2 Thematic Sequence Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
p
View(merged_data_1)
View(thematic)
data = read_excel("Thematic Sequence.xlsx")
p = ggplot(thematic, aes(x = `Term Code`, y = Enrolled Student Count)) +
knitr::opts_chunk$set(echo = TRUE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(#DataExplorer, # For explorer and cleaning data by visualizing missing values.
gptstudio,#For coding assistance
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
sjPlot,
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl,
dplyr
) # For creating dummy variables of categorical variables automatically.)
sessionInfo()
data = read_excel("Thematic Sequence.xlsx")
p = ggplot(data, aes(x = `Term Code`, y = `Enrolled Student Count`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("ISA2 Thematic Sequence Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
p
knitr::opts_chunk$set(echo = TRUE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(#DataExplorer, # For explorer and cleaning data by visualizing missing values.
gptstudio,#For coding assistance
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
sjPlot,
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl,
dplyr
) # For creating dummy variables of categorical variables automatically.)
sessionInfo()
data = read_excel("Thematic Sequence.xlsx")
p = ggplot(data, aes(x = `Term Code`, y = `Enrolled Student Count`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("ISA2 Thematic Sequence Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
p
data = read_excel("BA Minors.xlsx")
p = ggplot(data2, aes(x = `Term Code`, y = `Enrolled Student Count`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("Business Analytics Minor Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(#DataExplorer, # For explorer and cleaning data by visualizing missing values.
gptstudio,#For coding assistance
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
sjPlot,
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl,
dplyr
) # For creating dummy variables of categorical variables automatically.)
sessionInfo()
data = read_excel("Thematic Sequence.xlsx")
p = ggplot(data, aes(x = `Term Code`, y = `Enrolled Student Count`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("ISA2 Thematic Sequence Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
p
data = read_excel("BA Minors.xlsx")
p = ggplot(data, aes(x = `Term Code`, y = `Enrolled Student Count`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("Business Analytics Minor Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
View(merged_data)
data <- merged_data %>%
group_by(Term.Code) %>%
summarise(DistinctStudentCount = n_distinct(Student.ID))
View(data)
data <- merged_data %>%
group_by(Term.Code) %>%
summarise(DistinctStudentCount = n_distinct(Student.ID))
p = ggplot(data, aes(x = `Term.Code`, y = `DistinctStudentCount`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("Business Analytics Minor Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
data <- merged_data %>%
group_by(Term.Code) %>%
summarise(DistinctStudentCount = n_distinct(Student.ID))
p = ggplot(data, aes(x = `Term.Code`, y = `DistinctStudentCount`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue") +
xlab("Term Code") +
ylab("Enrolled Student Count") + +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data <- merged_data %>%
group_by(Term.Code) %>%
summarise(DistinctStudentCount = n_distinct(Student.ID))
p = ggplot(data, aes(x = `Term.Code`, y = `DistinctStudentCount`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue") +
xlab("Term Code") +
ylab("Enrolled Student Count") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
View(studentinfo)
# Create a new column indicating whether a student is a Business Analytics major for each major column
merged_data$Major.1_BA <- ifelse(grepl("BA Major", data$Major1), 1, 0)
# Create a new column indicating whether a student is a Business Analytics major for each major column
merged_data$Major.1 <- ifelse(grepl("BA Major", data$Major1), 1, 0)
# Create a new column indicating whether a student is a Business Analytics major for each major column
merged_data$Major.1_ <- ifelse(grepl("BA Major", data$Major.1), 1, 0)
knitr::opts_chunk$set(echo = TRUE)
if(require(pacman)==FALSE) install.packages("pacman")
pacman::p_load(#DataExplorer, # For explorer and cleaning data by visualizing missing values.
gptstudio,#For coding assistance
httr, # For downloading the data from the UCI
tidyverse, # For data manipulation
sjPlot,
corrplot, # for heatmaps
DataExplorer, #for exploring data
skimr, # for nice summary of data
readxl,
dplyr
) # For creating dummy variables of categorical variables automatically.)
sessionInfo()
data = read_excel("Thematic Sequence.xlsx")
p = ggplot(data, aes(x = `Term Code`, y = `Enrolled Student Count`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("ISA2 Thematic Sequence Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
p
data = read_excel("BA Minors.xlsx")
p = ggplot(data, aes(x = `Term Code`, y = `Enrolled Student Count`)) +
geom_bar(stat = "identity", color = "steelblue", fill = "steelblue", width = 0.8) +
xlab("Term Code") +
ylab("Enrolled Student Count") +
ggtitle("Business Analytics Minor Enrollment over Terms") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p
